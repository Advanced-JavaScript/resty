{"version":3,"sources":["components/header/header.js","components/form/form.js","components/results/results.js","components/footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","Form","props","handleChange","e","url","target","value","setState","handleClick","document","querySelector","classList","remove","add","method","handleSubmit","a","fetch","state","raw","json","data","count","results","headers","forEach","val","key","handleData","id","onClick","this","onChange","React","Component","Results","map","result","name","Footer","App","Count","bind","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.706811cb.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport './header.scss';\n/**\n * @component Header\n */\nfunction Header() {\n\n  return (\n    <header>\n      <h1>RESTy</h1>\n      <nav className='nav'>\n        <ul>\n          <li><a href='/'>Home</a></li>\n          <li><a href='/'>History</a></li>\n          <li><a href='/'>Help</a></li>\n        </ul>\n      </nav>\n    </header>\n  );\n}\n\nexport default Header;","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport './form.scss';\n/**\n * @component Form\n * @param {*} props for the form\n */\nclass Form extends React.Component {\n  constructor(props){\n    super(props);\n    this.state ={\n      url: '',\n      method: '',\n    };\n  }\n\n  handleChange =(e) =>  {\n    let url = e.target.value;\n    this.setState({url});\n  }\n\n  handleClick = (e) => {\n    const prevSelected = document.querySelector('.selected-btn');\n    prevSelected.classList.remove('selected-btn');\n    e.target.classList.add('selected-btn');\n    let method = e.target.value;\n    this.setState({method});\n  }\n\n  handleSubmit = async (e) => {\n    let raw = await fetch(this.state.url);\n    let data = await raw.json();\n    let count = data.count;\n    let results = data.results;\n    let headers = {};\n    raw.headers.forEach( (val, key) => headers[key] = val);\n\n    this.props.handleData(count, results, headers);\n  }\n\n  \n  render() {\n    return (\n      <>\n        <div className=\"method\">\n          <button\n            value=\"GET\" className=\"selected-btn\" id=\"get-btn\"\n            onClick={this.handleClick}\n          >\n              GET\n          </button>\n          <button value=\"POST\" id=\"post-btn\" onClick={this.handleClick}>\n              POST\n          </button>\n          <button value=\"PUT\" id=\"put-btn\" onClick={this.handleClick}>\n              PUT\n          </button>\n          <button value=\"PATCH\" id=\"patch-btn\" onClick={this.handleClick}>\n              PATCH\n          </button>\n          <button value=\"DELETE\" id=\"delete-btn\" onClick={this.handleClick}>\n              DELETE\n          </button>\n        </div>\n        <div className=\"form-input\">\n          <input\n            className=\"textbox\"\n            onChange={this.handleChange}\n          />\n          <button value=\"Submit\" id=\"submit-btn\" onClick={this.handleSubmit}>\n              Submit\n          </button>\n        </div>\n      </>\n    );\n\n  }\n  \n}\n  \nexport default Form;\n  ","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport './results.scss';\nimport JSONPretty from 'react-json-pretty';\n\nfunction Results(props) {\n\n  return(\n    <div>\n      <section className='result'>\n        <h3> Count: {props.count}</h3>\n        <h3> Headers:  </h3>\n        <p> <JSONPretty data ={props.headers} /></p>\n        <h3>Results: </h3>\n        <ul>\n          {props.results.map(result => {\n            return(\n              <li key={result.name}> <JSONPretty data= {result}/></li>\n            );\n          })}\n        </ul>\n           \n      </section>\n    </div>\n  );\n\n}\n\nexport default Results;","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport './footer.scss';\n/**\n * @component Footer\n */\nfunction Footer() {\n  return (\n    <footer>\n      <p>Â© 2020 All Rights Reserved</p>\n    </footer>\n  );\n}\n  \nexport default Footer;","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport './App.css';\nimport Header from './components/header/header';\nimport Form from './components/form/form';\nimport Results from './components/results/results';\nimport Footer from './components/footer/footer';\n/**\n * @class App to use the other components\n */\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      Count: 0,\n      results: [],\n      headers:'',\n    };\n  }\n\n  handleData(count, results, headers){\n    this.setState({count, results, headers});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Form\n          handleData = {this.handleData.bind(this)}\n        />\n        <Results \n          count= {this.state.count}\n          results = {this.state.results}\n          headers = {this.state.headers}\n        />\n        <Footer />\n      </div>\n    );\n\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}